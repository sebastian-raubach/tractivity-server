/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.tractivity.server.database.codegen.tables;


import java.sql.Timestamp;
import java.util.Map;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.raubach.tractivity.server.database.binding.ParticipantActivityBinding;
import uk.co.raubach.tractivity.server.database.codegen.TractivityDb;
import uk.co.raubach.tractivity.server.database.codegen.enums.ViewParticipantsParticipantGender;
import uk.co.raubach.tractivity.server.database.codegen.tables.records.ViewParticipantsRecord;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewParticipants extends TableImpl<ViewParticipantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tractivity_db.view_participants</code>
     */
    public static final ViewParticipants VIEW_PARTICIPANTS = new ViewParticipants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewParticipantsRecord> getRecordType() {
        return ViewParticipantsRecord.class;
    }

    /**
     * The column <code>tractivity_db.view_participants.participant_id</code>.
     */
    public final TableField<ViewParticipantsRecord, Integer> PARTICIPANT_ID = createField(DSL.name("participant_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>tractivity_db.view_participants.participant_name</code>.
     */
    public final TableField<ViewParticipantsRecord, String> PARTICIPANT_NAME = createField(DSL.name("participant_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>tractivity_db.view_participants.participant_dob</code>.
     */
    public final TableField<ViewParticipantsRecord, Timestamp> PARTICIPANT_DOB = createField(DSL.name("participant_dob"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column
     * <code>tractivity_db.view_participants.participant_gender</code>.
     */
    public final TableField<ViewParticipantsRecord, ViewParticipantsParticipantGender> PARTICIPANT_GENDER = createField(DSL.name("participant_gender"), SQLDataType.VARCHAR(6).asEnumDataType(uk.co.raubach.tractivity.server.database.codegen.enums.ViewParticipantsParticipantGender.class), this, "");

    /**
     * The column <code>tractivity_db.view_participants.created_on</code>.
     */
    public final TableField<ViewParticipantsRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).nullable(false).defaultValue(DSL.inline("0000-00-00 00:00:00", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>tractivity_db.view_participants.activity_counts</code>.
     */
    public final TableField<ViewParticipantsRecord, Map<String, Integer>> ACTIVITY_COUNTS = createField(DSL.name("activity_counts"), SQLDataType.JSON, this, "", new ParticipantActivityBinding());

    private ViewParticipants(Name alias, Table<ViewParticipantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewParticipants(Name alias, Table<ViewParticipantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_participants` as select `p`.`id` AS `participant_id`,`p`.`name` AS `participant_name`,`p`.`dob` AS `participant_dob`,`p`.`gender` AS `participant_gender`,`p`.`created_on` AS `created_on`,(select json_objectagg(`q`.`the_year`,`q`.`the_count`) from (select year(`tractivity`.`activities`.`created_on`) AS `the_year`,count(1) AS `the_count`,`tractivity`.`activity_participants`.`participant_id` AS `pid` from (`tractivity`.`activity_participants` left join `tractivity`.`activities` on((`tractivity`.`activities`.`id` = `tractivity`.`activity_participants`.`activity_id`))) group by year(`tractivity`.`activities`.`created_on`),`pid`) `q` where (`q`.`pid` = `p`.`id`)) AS `activity_counts` from `tractivity`.`participants` `p`"));
    }

    /**
     * Create an aliased <code>tractivity_db.view_participants</code> table
     * reference
     */
    public ViewParticipants(String alias) {
        this(DSL.name(alias), VIEW_PARTICIPANTS);
    }

    /**
     * Create an aliased <code>tractivity_db.view_participants</code> table
     * reference
     */
    public ViewParticipants(Name alias) {
        this(alias, VIEW_PARTICIPANTS);
    }

    /**
     * Create a <code>tractivity_db.view_participants</code> table reference
     */
    public ViewParticipants() {
        this(DSL.name("view_participants"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TractivityDb.TRACTIVITY_DB;
    }

    @Override
    public ViewParticipants as(String alias) {
        return new ViewParticipants(DSL.name(alias), this);
    }

    @Override
    public ViewParticipants as(Name alias) {
        return new ViewParticipants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewParticipants rename(String name) {
        return new ViewParticipants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewParticipants rename(Name name) {
        return new ViewParticipants(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Timestamp, ViewParticipantsParticipantGender, Timestamp, Map<String, Integer>> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
