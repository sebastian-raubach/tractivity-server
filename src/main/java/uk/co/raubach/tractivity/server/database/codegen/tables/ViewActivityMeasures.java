/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.tractivity.server.database.codegen.tables;


import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.raubach.tractivity.server.database.binding.MeasureRestrictionsBinding;
import uk.co.raubach.tractivity.server.database.codegen.TractivityDb;
import uk.co.raubach.tractivity.server.database.codegen.enums.ViewActivityMeasuresMeasureType;
import uk.co.raubach.tractivity.server.database.codegen.enums.ViewActivityMeasuresParticipantGender;
import uk.co.raubach.tractivity.server.database.codegen.tables.records.ViewActivityMeasuresRecord;
import uk.co.raubach.tractivity.server.pojo.MeasureRestrictions;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewActivityMeasures extends TableImpl<ViewActivityMeasuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>tractivity_db.view_activity_measures</code>
     */
    public static final ViewActivityMeasures VIEW_ACTIVITY_MEASURES = new ViewActivityMeasures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewActivityMeasuresRecord> getRecordType() {
        return ViewActivityMeasuresRecord.class;
    }

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.activity_measure_id</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, Integer> ACTIVITY_MEASURE_ID = createField(DSL.name("activity_measure_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>tractivity_db.view_activity_measures.activity_id</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, Integer> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.activity_type_id</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, Integer> ACTIVITY_TYPE_ID = createField(DSL.name("activity_type_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.activity_type_name</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, String> ACTIVITY_TYPE_NAME = createField(DSL.name("activity_type_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.participant_id</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, Integer> PARTICIPANT_ID = createField(DSL.name("participant_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.participant_name</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, String> PARTICIPANT_NAME = createField(DSL.name("participant_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.participant_gender</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, ViewActivityMeasuresParticipantGender> PARTICIPANT_GENDER = createField(DSL.name("participant_gender"), SQLDataType.VARCHAR(6).asEnumDataType(uk.co.raubach.tractivity.server.database.codegen.enums.ViewActivityMeasuresParticipantGender.class), this, "");

    /**
     * The column <code>tractivity_db.view_activity_measures.measure_id</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, Integer> MEASURE_ID = createField(DSL.name("measure_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.measure_name</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, String> MEASURE_NAME = createField(DSL.name("measure_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.measure_type</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, ViewActivityMeasuresMeasureType> MEASURE_TYPE = createField(DSL.name("measure_type"), SQLDataType.VARCHAR(11).defaultValue(DSL.inline("text", SQLDataType.VARCHAR)).asEnumDataType(uk.co.raubach.tractivity.server.database.codegen.enums.ViewActivityMeasuresMeasureType.class), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.measure_restrictions</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, MeasureRestrictions> MEASURE_RESTRICTIONS = createField(DSL.name("measure_restrictions"), SQLDataType.JSON, this, "", new MeasureRestrictionsBinding());

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.measure_default_value</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, String> MEASURE_DEFAULT_VALUE = createField(DSL.name("measure_default_value"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_measures.measured_value</code>.
     */
    public final TableField<ViewActivityMeasuresRecord, String> MEASURED_VALUE = createField(DSL.name("measured_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ViewActivityMeasures(Name alias, Table<ViewActivityMeasuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewActivityMeasures(Name alias, Table<ViewActivityMeasuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_activity_measures` as select `tractivity`.`activity_measures`.`id` AS `activity_measure_id`,`tractivity`.`activities`.`id` AS `activity_id`,`tractivity`.`activity_types`.`id` AS `activity_type_id`,`tractivity`.`activity_types`.`name` AS `activity_type_name`,`tractivity`.`participants`.`id` AS `participant_id`,`tractivity`.`participants`.`name` AS `participant_name`,`tractivity`.`participants`.`gender` AS `participant_gender`,`tractivity`.`measures`.`id` AS `measure_id`,`tractivity`.`measures`.`name` AS `measure_name`,`tractivity`.`measures`.`type` AS `measure_type`,`tractivity`.`measures`.`restrictions` AS `measure_restrictions`,`tractivity`.`measures`.`default_value` AS `measure_default_value`,`tractivity`.`activity_measures`.`measured_value` AS `measured_value` from ((((`tractivity`.`activity_measures` left join `tractivity`.`activities` on((`tractivity`.`activities`.`id` = `tractivity`.`activity_measures`.`activity_id`))) left join `tractivity`.`activity_types` on((`tractivity`.`activities`.`activity_type_id` = `tractivity`.`activity_types`.`id`))) left join `tractivity`.`participants` on((`tractivity`.`participants`.`id` = `tractivity`.`activity_measures`.`participant_id`))) left join `tractivity`.`measures` on((`tractivity`.`measures`.`id` = `tractivity`.`activity_measures`.`measure_id`)))"));
    }

    /**
     * Create an aliased <code>tractivity_db.view_activity_measures</code> table
     * reference
     */
    public ViewActivityMeasures(String alias) {
        this(DSL.name(alias), VIEW_ACTIVITY_MEASURES);
    }

    /**
     * Create an aliased <code>tractivity_db.view_activity_measures</code> table
     * reference
     */
    public ViewActivityMeasures(Name alias) {
        this(alias, VIEW_ACTIVITY_MEASURES);
    }

    /**
     * Create a <code>tractivity_db.view_activity_measures</code> table
     * reference
     */
    public ViewActivityMeasures() {
        this(DSL.name("view_activity_measures"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TractivityDb.TRACTIVITY_DB;
    }

    @Override
    public ViewActivityMeasures as(String alias) {
        return new ViewActivityMeasures(DSL.name(alias), this);
    }

    @Override
    public ViewActivityMeasures as(Name alias) {
        return new ViewActivityMeasures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewActivityMeasures rename(String name) {
        return new ViewActivityMeasures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewActivityMeasures rename(Name name) {
        return new ViewActivityMeasures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Integer, String, Integer, String, ViewActivityMeasuresParticipantGender, Integer, String, ViewActivityMeasuresMeasureType, MeasureRestrictions, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
    // @formatter:on
}
