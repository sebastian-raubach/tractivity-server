/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.tractivity.server.database.codegen.tables;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.raubach.tractivity.server.database.codegen.TractivityDb;
import uk.co.raubach.tractivity.server.database.codegen.tables.records.ActivitiesRecord;


// @formatter:off
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activities extends TableImpl<ActivitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tractivity_db.activities</code>
     */
    public static final Activities ACTIVITIES = new Activities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitiesRecord> getRecordType() {
        return ActivitiesRecord.class;
    }

    /**
     * The column <code>tractivity_db.activities.id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tractivity_db.activities.activity_type_id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> ACTIVITY_TYPE_ID = createField(DSL.name("activity_type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tractivity_db.activities.event_id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tractivity_db.activities.location_id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> LOCATION_ID = createField(DSL.name("location_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>tractivity_db.activities.created_on</code>.
     */
    public final TableField<ActivitiesRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>tractivity_db.activities.updated_on</code>.
     */
    public final TableField<ActivitiesRecord, Timestamp> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.TIMESTAMP(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Activities(Name alias, Table<ActivitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activities(Name alias, Table<ActivitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tractivity_db.activities</code> table reference
     */
    public Activities(String alias) {
        this(DSL.name(alias), ACTIVITIES);
    }

    /**
     * Create an aliased <code>tractivity_db.activities</code> table reference
     */
    public Activities(Name alias) {
        this(alias, ACTIVITIES);
    }

    /**
     * Create a <code>tractivity_db.activities</code> table reference
     */
    public Activities() {
        this(DSL.name("activities"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TractivityDb.TRACTIVITY_DB;
    }

    @Override
    public Identity<ActivitiesRecord, Integer> getIdentity() {
        return (Identity<ActivitiesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ActivitiesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Activities.ACTIVITIES, DSL.name("KEY_activities_PRIMARY"), new TableField[] { Activities.ACTIVITIES.ID }, true);
    }

    @Override
    public Activities as(String alias) {
        return new Activities(DSL.name(alias), this);
    }

    @Override
    public Activities as(Name alias) {
        return new Activities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(String name) {
        return new Activities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(Name name) {
        return new Activities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Integer, Timestamp, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
    // @formatter:on
}
