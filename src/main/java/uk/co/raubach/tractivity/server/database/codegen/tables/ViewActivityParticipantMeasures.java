/*
 * This file is generated by jOOQ.
 */
package uk.co.raubach.tractivity.server.database.codegen.tables;


import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.co.raubach.tractivity.server.database.binding.ParticipantMeasureBinding;
import uk.co.raubach.tractivity.server.database.codegen.TractivityDb;
import uk.co.raubach.tractivity.server.database.codegen.tables.records.ViewActivityParticipantMeasuresRecord;
import uk.co.raubach.tractivity.server.pojo.ParticipantMeasures;


// @formatter:off
/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewActivityParticipantMeasures extends TableImpl<ViewActivityParticipantMeasuresRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>tractivity_db.view_activity_participant_measures</code>
     */
    public static final ViewActivityParticipantMeasures VIEW_ACTIVITY_PARTICIPANT_MEASURES = new ViewActivityParticipantMeasures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewActivityParticipantMeasuresRecord> getRecordType() {
        return ViewActivityParticipantMeasuresRecord.class;
    }

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.activity_id</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, Integer> ACTIVITY_ID = createField(DSL.name("activity_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.activity_type_id</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, Integer> ACTIVITY_TYPE_ID = createField(DSL.name("activity_type_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.activity_type_name</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, String> ACTIVITY_TYPE_NAME = createField(DSL.name("activity_type_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.activity_created_on</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, Timestamp> ACTIVITY_CREATED_ON = createField(DSL.name("activity_created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.event_id</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.event_name</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, String> EVENT_NAME = createField(DSL.name("event_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.event_created_on</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, Timestamp> EVENT_CREATED_ON = createField(DSL.name("event_created_on"), SQLDataType.TIMESTAMP(0), this, "");

    /**
     * The column
     * <code>tractivity_db.view_activity_participant_measures.participant_measures</code>.
     */
    public final TableField<ViewActivityParticipantMeasuresRecord, ParticipantMeasures[]> PARTICIPANT_MEASURES = createField(DSL.name("participant_measures"), SQLDataType.JSON, this, "", new ParticipantMeasureBinding());

    private ViewActivityParticipantMeasures(Name alias, Table<ViewActivityParticipantMeasuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewActivityParticipantMeasures(Name alias, Table<ViewActivityParticipantMeasuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `view_activity_participant_measures` as select `tractivity`.`activities`.`id` AS `activity_id`,`tractivity`.`activity_types`.`id` AS `activity_type_id`,`tractivity`.`activity_types`.`name` AS `activity_type_name`,`tractivity`.`activities`.`created_on` AS `activity_created_on`,`tractivity`.`events`.`id` AS `event_id`,`tractivity`.`events`.`name` AS `event_name`,`tractivity`.`events`.`created_on` AS `event_created_on`,json_arrayagg(json_object('participantId',`tractivity`.`participants`.`id`,'participantName',`tractivity`.`participants`.`name`,'participantMeasures',(select json_arrayagg(json_object('activityMeasureId',`tractivity`.`activity_measures`.`id`,'measureId',`tractivity`.`measures`.`id`,'measureName',`tractivity`.`measures`.`name`,'measureType',`tractivity`.`measures`.`type`,'measuredValue',`tractivity`.`activity_measures`.`measured_value`)) from (`tractivity`.`activity_measures` left join `tractivity`.`measures` on((`tractivity`.`measures`.`id` = `tractivity`.`activity_measures`.`measure_id`))) where ((`tractivity`.`activity_measures`.`activity_id` = `tractivity`.`activities`.`id`) and (`tractivity`.`activity_measures`.`participant_id` = `tractivity`.`participants`.`id`))))) AS `participant_measures` from ((((`tractivity`.`activities` left join `tractivity`.`activity_types` on((`tractivity`.`activities`.`activity_type_id` = `tractivity`.`activity_types`.`id`))) left join `tractivity`.`events` on((`tractivity`.`events`.`id` = `tractivity`.`activities`.`event_id`))) left join `tractivity`.`activity_participants` on((`tractivity`.`activity_participants`.`activity_id` = `tractivity`.`activities`.`id`))) left join `tractivity`.`participants` on((`tractivity`.`participants`.`id` = `tractivity`.`activity_participants`.`participant_id`))) group by `tractivity`.`activities`.`id`"));
    }

    /**
     * Create an aliased
     * <code>tractivity_db.view_activity_participant_measures</code> table
     * reference
     */
    public ViewActivityParticipantMeasures(String alias) {
        this(DSL.name(alias), VIEW_ACTIVITY_PARTICIPANT_MEASURES);
    }

    /**
     * Create an aliased
     * <code>tractivity_db.view_activity_participant_measures</code> table
     * reference
     */
    public ViewActivityParticipantMeasures(Name alias) {
        this(alias, VIEW_ACTIVITY_PARTICIPANT_MEASURES);
    }

    /**
     * Create a <code>tractivity_db.view_activity_participant_measures</code>
     * table reference
     */
    public ViewActivityParticipantMeasures() {
        this(DSL.name("view_activity_participant_measures"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TractivityDb.TRACTIVITY_DB;
    }

    @Override
    public ViewActivityParticipantMeasures as(String alias) {
        return new ViewActivityParticipantMeasures(DSL.name(alias), this);
    }

    @Override
    public ViewActivityParticipantMeasures as(Name alias) {
        return new ViewActivityParticipantMeasures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewActivityParticipantMeasures rename(String name) {
        return new ViewActivityParticipantMeasures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewActivityParticipantMeasures rename(Name name) {
        return new ViewActivityParticipantMeasures(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, String, Timestamp, Integer, String, Timestamp, ParticipantMeasures[]> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
    // @formatter:on
}
