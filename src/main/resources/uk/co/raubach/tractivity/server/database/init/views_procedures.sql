DROP VIEW IF EXISTS `view_events`;
create algorithm = UNDEFINED sql security definer view `view_events` as select events.id as event_id, events.name as event_name, events.created_on as event_created_on, if (count(activities.id) = 0, JSON_ARRAY(), json_arrayagg( json_object( 'activityId', activities.id, 'activityTypeId', activity_types.id, 'activityTypeName', activity_types.name, 'activityParticipants', ( select json_arrayagg( json_object( 'participantId', participants.id, 'participantName', participants.name, 'participantDob', participants.dob, 'participantGender', participants.gender ) ) from participants left join activity_participants on participants.id = activity_participants.participant_id where activity_participants.activity_id = activities.id) ))) as activities from events left join activities on activities.event_id = events.id left join activity_types on activities.activity_type_id = activity_types.id group by events.id;

DROP VIEW IF EXISTS `view_participants`;
create algorithm = UNDEFINED sql security definer view `view_participants` as select p.id as participant_id, p.name as participant_name, p.dob as participant_dob, p.gender as participant_gender, p.created_on as created_on, ( select json_objectagg(q.the_year, q.the_count) from ( select year(activities.created_on) as the_year, count(1) as the_count, activity_participants.participant_id as pid from activity_participants left join activities on activities.id = activity_participants.activity_id group by year(created_on), pid) q where q.pid = p.id ) as activity_counts from participants p;

DROP VIEW IF EXISTS `view_activities`;
create algorithm = UNDEFINED sql security definer view `view_activities` as select activities.id as activity_id, activity_types.id as activity_type_id, activity_types.name as activity_type_name, activities.created_on as activity_created_on, events.id as event_id, events.name as event_name, events.created_on as event_created_on, json_arrayagg( json_object( 'participantId', participants.id, 'participantName', participants.name, 'participantDob', participants.dob, 'participantGender', participants.gender ) ) as participants from activities left join activity_types on activity_types.id = activities.activity_type_id left join events on events.id = activities.event_id left join activity_participants on activity_participants.activity_id = activities.id left join participants on participants.id = activity_participants.participant_id group by activities.id;

DROP VIEW IF EXISTS `view_activity_participant_measures`;
create algorithm = UNDEFINED sql security definer view `view_activity_participant_measures` as select activities.id as activity_id, activity_types.id as activity_type_id, activity_types.name as activity_type_name, activities.created_on as activity_created_on, events.id as event_id, events.name as event_name, events.created_on as event_created_on, locations.id as location_id, locations.name as location_name, locations.latitude as location_latitude, locations.longitude as location_longitude, locations.elevation as location_elevation, json_arrayagg( json_object( 'participantId', participants.id, 'participantName', participants.name, 'participantMeasures', ( select json_arrayagg( json_object( 'activityMeasureId', activity_measures.id, 'measureId', measures.id, 'measureName', measures.name, 'measureType', measures.type, 'measuredValue', activity_measures.measured_value) ) from activity_measures left join measures on measures.id = activity_measures.measure_id where activity_measures.activity_id = activities.id and activity_measures.participant_id = participants.id) )) as participant_measures from activities left join activity_types on activities.activity_type_id = activity_types.id left join events on events.id = activities.event_id left join activity_participants on activity_participants.activity_id = activities.id left join participants on participants.id = activity_participants.participant_id left join locations on activities.location_id = locations.id group by activities.id;